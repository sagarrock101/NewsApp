// Generated by Dagger (https://dagger.dev).
package com.sagarock101.newsheadlines.di;

import com.sagarock101.newsheadlines.data.remote.SectionRemoteSource;
import com.sagarock101.newsheadlines.data.remote.SectionService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsHeadlinesModule_ProvideSectionRemoteDataSourceFactory implements Factory<SectionRemoteSource> {
  private final NewsHeadlinesModule module;

  private final Provider<SectionService> sectionServiceProvider;

  public NewsHeadlinesModule_ProvideSectionRemoteDataSourceFactory(NewsHeadlinesModule module,
      Provider<SectionService> sectionServiceProvider) {
    this.module = module;
    this.sectionServiceProvider = sectionServiceProvider;
  }

  @Override
  public SectionRemoteSource get() {
    return provideSectionRemoteDataSource(module, sectionServiceProvider.get());
  }

  public static NewsHeadlinesModule_ProvideSectionRemoteDataSourceFactory create(
      NewsHeadlinesModule module, Provider<SectionService> sectionServiceProvider) {
    return new NewsHeadlinesModule_ProvideSectionRemoteDataSourceFactory(module, sectionServiceProvider);
  }

  public static SectionRemoteSource provideSectionRemoteDataSource(NewsHeadlinesModule instance,
      SectionService sectionService) {
    return Preconditions.checkNotNullFromProvides(instance.provideSectionRemoteDataSource(sectionService));
  }
}
