// Generated by Dagger (https://dagger.dev).
package com.sagarock101.newsapp.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.sagarock101.categories.data.SourceRepo;
import com.sagarock101.categories.data.SourceService;
import com.sagarock101.categories.data.remoteSource.SourceRemoteSource;
import com.sagarock101.categories.di.SourceDataModule;
import com.sagarock101.categories.di.SourceDataModule_ProvideSourceRemoteSourceFactory;
import com.sagarock101.categories.di.SourceDataModule_ProvideSourceRepoFactory;
import com.sagarock101.categories.di.SourceDataModule_ProvideSourceServiceFactory;
import com.sagarock101.categories.di.SourcesFragmentBuildersModule_ContributeSourceFragment;
import com.sagarock101.categories.ui.fragments.SourcesFragment;
import com.sagarock101.categories.ui.fragments.SourcesFragment_MembersInjector;
import com.sagarock101.categories.viewmodel.SourceViewModel;
import com.sagarock101.categories.viewmodel.SourceViewModel_Factory;
import com.sagarock101.core.di.CoreDataModule;
import com.sagarock101.core.di.CoreDataModule_ProvideApiInterceptorFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideGsonConverterFactoryFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideGsonFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideOkHttpClientForGuardianApiFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideOkhttpClientFactory;
import com.sagarock101.core.di.CoreDataModule_ProvidePreferenceHelperFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideRetrofitFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideRetrofitForGuardianApiFactory;
import com.sagarock101.core.di.CoreDataModule_ProvideTheGuardianApiInterceptorFactory;
import com.sagarock101.core.di.ViewModelFactory;
import com.sagarock101.core.di.ViewModelFactory_Factory;
import com.sagarock101.core.utils.GuardianApiKeyInterceptor;
import com.sagarock101.core.utils.InterceptorWithApiKey;
import com.sagarock101.core.utils.PreferenceHelper;
import com.sagarock101.database.NewsDao;
import com.sagarock101.database.NewsDatabase;
import com.sagarock101.database.NewsDatabaseRepo;
import com.sagarock101.database.di.DatabaseModule;
import com.sagarock101.database.di.DatabaseModule_ProvideDaoFactory;
import com.sagarock101.database.di.DatabaseModule_ProvideNewsDatabaseFactory;
import com.sagarock101.database.di.DatabaseModule_ProvideNewsDatabaseRepoFactory;
import com.sagarock101.newsapp.MyApplication;
import com.sagarock101.newsapp.MyApplication_MembersInjector;
import com.sagarock101.newsapp.ui.activities.MainActivity;
import com.sagarock101.newsapp.ui.activities.MainActivity_MembersInjector;
import com.sagarock101.newsapp.ui.fragments.SplashFragment;
import com.sagarock101.newsapp.ui.fragments.SplashFragment_MembersInjector;
import com.sagarock101.newsheadlines.data.NewsHeadlinesRepo;
import com.sagarock101.newsheadlines.data.SectionRepo;
import com.sagarock101.newsheadlines.data.remote.NewsHeadLinesRemoteSource;
import com.sagarock101.newsheadlines.data.remote.NewsHeadlinesService;
import com.sagarock101.newsheadlines.data.remote.SectionRemoteSource;
import com.sagarock101.newsheadlines.data.remote.SectionService;
import com.sagarock101.newsheadlines.di.FragmentBuildersModule_ContributeNewsDetailFragment;
import com.sagarock101.newsheadlines.di.FragmentBuildersModule_ContributeNewsHeadlinesFragment;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule_ProvideNewsHeadlinesRepoFactory;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule_ProvideNewsHeadlinesServiceFactory;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule_ProvideNewsRemoteDataSourceFactory;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule_ProvideSectionRemoteDataSourceFactory;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule_ProvideSectionRepoFactory;
import com.sagarock101.newsheadlines.di.NewsHeadlinesModule_ProvideSectionServiceFactory;
import com.sagarock101.newsheadlines.ui.fragments.NewsDetailFragment;
import com.sagarock101.newsheadlines.ui.fragments.NewsDetailFragment_MembersInjector;
import com.sagarock101.newsheadlines.ui.fragments.NewsHeadlinesFragment;
import com.sagarock101.newsheadlines.ui.fragments.NewsHeadlinesFragment_MembersInjector;
import com.sagarock101.newsheadlines.viewmodel.NewsViewModel;
import com.sagarock101.newsheadlines.viewmodel.NewsViewModel_Factory;
import com.sagarock101.saved.di.SavedFragmentsBuildersModule_ContributeSavedFragment;
import com.sagarock101.saved.di.SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment;
import com.sagarock101.saved.ui.fragment.SavedFragment;
import com.sagarock101.saved.ui.fragment.SavedFragment_MembersInjector;
import com.sagarock101.saved.ui.fragment.SavedNewsDetailFragment;
import com.sagarock101.saved.ui.fragment.SavedNewsDetailFragment_MembersInjector;
import com.sagarock101.saved.viewmodel.SavedNewsViewModel;
import com.sagarock101.saved.viewmodel.SavedNewsViewModel_Factory;
import com.sagarock101.search.data.remote.SearchRemoteSource;
import com.sagarock101.search.data.remote.SearchRepo;
import com.sagarock101.search.data.remote.SearchService;
import com.sagarock101.search.di.SearchBuildersModule_ContributeSearchActivity;
import com.sagarock101.search.di.SearchFragmentBuildersModule_ContributeSearchResultDetailFragment;
import com.sagarock101.search.di.SearchFragmentBuildersModule_ContributeSearchResultsFragment;
import com.sagarock101.search.di.SearchModule;
import com.sagarock101.search.di.SearchModule_ProvideSearchDataSourceFactory;
import com.sagarock101.search.di.SearchModule_ProvideSearchRepoFactory;
import com.sagarock101.search.di.SearchModule_ProvideSearchServiceFactory;
import com.sagarock101.search.ui.activity.SearchActivity;
import com.sagarock101.search.ui.fragment.SearchDetailFragment;
import com.sagarock101.search.ui.fragment.SearchDetailFragment_MembersInjector;
import com.sagarock101.search.ui.fragment.SearchResultsFragment;
import com.sagarock101.search.ui.fragment.SearchResultsFragment_MembersInjector;
import com.sagarock101.search.ui.viewmodel.SearchViewModel;
import com.sagarock101.search.ui.viewmodel.SearchViewModel_Factory;
import com.sagarock101.widget.WidgetItemDetailActivity;
import com.sagarock101.widget.WidgetItemDetailActivity_MembersInjector;
import com.sagarock101.widget.WidgetViewModel;
import com.sagarock101.widget.WidgetViewModel_Factory;
import com.sagarock101.widget.di.ServiceBuildersModule_ContributeStackWidgetService;
import com.sagarock101.widget.di.WidgetBuildersModule_ContributeWidgetItemDetailActivity;
import com.sagarock101.widget.service.StackWidgetService;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final Application application;

  private final CoreDataModule coreDataModule;

  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<SearchBuildersModule_ContributeSearchActivity.SearchActivitySubcomponent.Factory> searchActivitySubcomponentFactoryProvider;

  private Provider<ServiceBuildersModule_ContributeStackWidgetService.StackWidgetServiceSubcomponent.Factory> stackWidgetServiceSubcomponentFactoryProvider;

  private Provider<WidgetBuildersModule_ContributeWidgetItemDetailActivity.WidgetItemDetailActivitySubcomponent.Factory> widgetItemDetailActivitySubcomponentFactoryProvider;

  private Provider<SavedFragmentsBuildersModule_ContributeSavedFragment.SavedFragmentSubcomponent.Factory> savedFragmentSubcomponentFactoryProvider;

  private Provider<SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment.SavedNewsDetailFragmentSubcomponent.Factory> savedNewsDetailFragmentSubcomponentFactoryProvider;

  private Provider<InterceptorWithApiKey> provideApiInterceptorProvider;

  private Provider<OkHttpClient> provideOkhttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<NewsHeadlinesService> provideNewsHeadlinesServiceProvider;

  private Provider<NewsHeadLinesRemoteSource> provideNewsRemoteDataSourceProvider;

  private Provider<GuardianApiKeyInterceptor> provideTheGuardianApiInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientForGuardianApiProvider;

  private Provider<Retrofit> provideRetrofitForGuardianApiProvider;

  private Provider<SectionService> provideSectionServiceProvider;

  private Provider<SectionRemoteSource> provideSectionRemoteDataSourceProvider;

  private Provider<NewsHeadlinesRepo> provideNewsHeadlinesRepoProvider;

  private Provider<SectionRepo> provideSectionRepoProvider;

  private Provider<Application> applicationProvider;

  private Provider<NewsDatabase> provideNewsDatabaseProvider;

  private Provider<NewsDao> provideDaoProvider;

  private Provider<NewsDatabaseRepo> provideNewsDatabaseRepoProvider;

  private Provider<NewsViewModel> newsViewModelProvider;

  private Provider<SearchService> provideSearchServiceProvider;

  private Provider<SearchRemoteSource> provideSearchDataSourceProvider;

  private Provider<SearchRepo> provideSearchRepoProvider;

  private Provider<SearchViewModel> searchViewModelProvider;

  private Provider<SourceService> provideSourceServiceProvider;

  private Provider<SourceRemoteSource> provideSourceRemoteSourceProvider;

  private Provider<SourceRepo> provideSourceRepoProvider;

  private Provider<SourceViewModel> sourceViewModelProvider;

  private Provider<WidgetViewModel> widgetViewModelProvider;

  private Provider<SavedNewsViewModel> savedNewsViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerApplicationComponent(NewsHeadlinesModule newsHeadlinesModuleParam,
      CoreDataModule coreDataModuleParam, SourceDataModule sourceDataModuleParam,
      DatabaseModule databaseModuleParam, SearchModule searchModuleParam,
      Application applicationParam) {
    this.application = applicationParam;
    this.coreDataModule = coreDataModuleParam;
    initialize(newsHeadlinesModuleParam, coreDataModuleParam, sourceDataModuleParam, databaseModuleParam, searchModuleParam, applicationParam);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(6).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SearchActivity.class, (Provider) searchActivitySubcomponentFactoryProvider).put(StackWidgetService.class, (Provider) stackWidgetServiceSubcomponentFactoryProvider).put(WidgetItemDetailActivity.class, (Provider) widgetItemDetailActivitySubcomponentFactoryProvider).put(SavedFragment.class, (Provider) savedFragmentSubcomponentFactoryProvider).put(SavedNewsDetailFragment.class, (Provider) savedNewsDetailFragmentSubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private PreferenceHelper preferenceHelper() {
    return CoreDataModule_ProvidePreferenceHelperFactory.providePreferenceHelper(coreDataModule, application);
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NewsHeadlinesModule newsHeadlinesModuleParam,
      final CoreDataModule coreDataModuleParam, final SourceDataModule sourceDataModuleParam,
      final DatabaseModule databaseModuleParam, final SearchModule searchModuleParam,
      final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.searchActivitySubcomponentFactoryProvider = new Provider<SearchBuildersModule_ContributeSearchActivity.SearchActivitySubcomponent.Factory>() {
      @Override
      public SearchBuildersModule_ContributeSearchActivity.SearchActivitySubcomponent.Factory get(
          ) {
        return new SearchActivitySubcomponentFactory();
      }
    };
    this.stackWidgetServiceSubcomponentFactoryProvider = new Provider<ServiceBuildersModule_ContributeStackWidgetService.StackWidgetServiceSubcomponent.Factory>() {
      @Override
      public ServiceBuildersModule_ContributeStackWidgetService.StackWidgetServiceSubcomponent.Factory get(
          ) {
        return new StackWidgetServiceSubcomponentFactory();
      }
    };
    this.widgetItemDetailActivitySubcomponentFactoryProvider = new Provider<WidgetBuildersModule_ContributeWidgetItemDetailActivity.WidgetItemDetailActivitySubcomponent.Factory>() {
      @Override
      public WidgetBuildersModule_ContributeWidgetItemDetailActivity.WidgetItemDetailActivitySubcomponent.Factory get(
          ) {
        return new WidgetItemDetailActivitySubcomponentFactory();
      }
    };
    this.savedFragmentSubcomponentFactoryProvider = new Provider<SavedFragmentsBuildersModule_ContributeSavedFragment.SavedFragmentSubcomponent.Factory>() {
      @Override
      public SavedFragmentsBuildersModule_ContributeSavedFragment.SavedFragmentSubcomponent.Factory get(
          ) {
        return new SavedFragmentSubcomponentFactory();
      }
    };
    this.savedNewsDetailFragmentSubcomponentFactoryProvider = new Provider<SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment.SavedNewsDetailFragmentSubcomponent.Factory>() {
      @Override
      public SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment.SavedNewsDetailFragmentSubcomponent.Factory get(
          ) {
        return new SavedNewsDetailFragmentSubcomponentFactory();
      }
    };
    this.provideApiInterceptorProvider = CoreDataModule_ProvideApiInterceptorFactory.create(coreDataModuleParam);
    this.provideOkhttpClientProvider = CoreDataModule_ProvideOkhttpClientFactory.create(coreDataModuleParam, provideApiInterceptorProvider);
    this.provideGsonProvider = DoubleCheck.provider(CoreDataModule_ProvideGsonFactory.create(coreDataModuleParam));
    this.provideGsonConverterFactoryProvider = DoubleCheck.provider(CoreDataModule_ProvideGsonConverterFactoryFactory.create(coreDataModuleParam, provideGsonProvider));
    this.provideRetrofitProvider = DoubleCheck.provider(CoreDataModule_ProvideRetrofitFactory.create(coreDataModuleParam, provideOkhttpClientProvider, provideGsonConverterFactoryProvider));
    this.provideNewsHeadlinesServiceProvider = DoubleCheck.provider(NewsHeadlinesModule_ProvideNewsHeadlinesServiceFactory.create(newsHeadlinesModuleParam, provideRetrofitProvider));
    this.provideNewsRemoteDataSourceProvider = DoubleCheck.provider(NewsHeadlinesModule_ProvideNewsRemoteDataSourceFactory.create(newsHeadlinesModuleParam, provideNewsHeadlinesServiceProvider));
    this.provideTheGuardianApiInterceptorProvider = CoreDataModule_ProvideTheGuardianApiInterceptorFactory.create(coreDataModuleParam);
    this.provideOkHttpClientForGuardianApiProvider = CoreDataModule_ProvideOkHttpClientForGuardianApiFactory.create(coreDataModuleParam, provideTheGuardianApiInterceptorProvider);
    this.provideRetrofitForGuardianApiProvider = CoreDataModule_ProvideRetrofitForGuardianApiFactory.create(coreDataModuleParam, provideOkHttpClientForGuardianApiProvider, provideGsonConverterFactoryProvider);
    this.provideSectionServiceProvider = DoubleCheck.provider(NewsHeadlinesModule_ProvideSectionServiceFactory.create(newsHeadlinesModuleParam, provideRetrofitForGuardianApiProvider));
    this.provideSectionRemoteDataSourceProvider = DoubleCheck.provider(NewsHeadlinesModule_ProvideSectionRemoteDataSourceFactory.create(newsHeadlinesModuleParam, provideSectionServiceProvider));
    this.provideNewsHeadlinesRepoProvider = DoubleCheck.provider(NewsHeadlinesModule_ProvideNewsHeadlinesRepoFactory.create(newsHeadlinesModuleParam, provideNewsRemoteDataSourceProvider, provideSectionRemoteDataSourceProvider));
    this.provideSectionRepoProvider = DoubleCheck.provider(NewsHeadlinesModule_ProvideSectionRepoFactory.create(newsHeadlinesModuleParam, provideSectionRemoteDataSourceProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideNewsDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvideNewsDatabaseFactory.create(databaseModuleParam, applicationProvider));
    this.provideDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideDaoFactory.create(databaseModuleParam, provideNewsDatabaseProvider));
    this.provideNewsDatabaseRepoProvider = DoubleCheck.provider(DatabaseModule_ProvideNewsDatabaseRepoFactory.create(databaseModuleParam, provideDaoProvider));
    this.newsViewModelProvider = NewsViewModel_Factory.create(provideNewsHeadlinesRepoProvider, provideSectionRepoProvider, provideNewsDatabaseRepoProvider, applicationProvider);
    this.provideSearchServiceProvider = DoubleCheck.provider(SearchModule_ProvideSearchServiceFactory.create(searchModuleParam, provideRetrofitForGuardianApiProvider));
    this.provideSearchDataSourceProvider = DoubleCheck.provider(SearchModule_ProvideSearchDataSourceFactory.create(searchModuleParam, provideSearchServiceProvider));
    this.provideSearchRepoProvider = DoubleCheck.provider(SearchModule_ProvideSearchRepoFactory.create(searchModuleParam, provideSearchDataSourceProvider));
    this.searchViewModelProvider = SearchViewModel_Factory.create(provideSearchRepoProvider, provideNewsDatabaseRepoProvider);
    this.provideSourceServiceProvider = DoubleCheck.provider(SourceDataModule_ProvideSourceServiceFactory.create(sourceDataModuleParam, provideRetrofitProvider));
    this.provideSourceRemoteSourceProvider = DoubleCheck.provider(SourceDataModule_ProvideSourceRemoteSourceFactory.create(sourceDataModuleParam, provideSourceServiceProvider));
    this.provideSourceRepoProvider = DoubleCheck.provider(SourceDataModule_ProvideSourceRepoFactory.create(sourceDataModuleParam, provideSourceRemoteSourceProvider));
    this.sourceViewModelProvider = SourceViewModel_Factory.create(provideSourceRepoProvider);
    this.widgetViewModelProvider = WidgetViewModel_Factory.create(provideNewsDatabaseRepoProvider);
    this.savedNewsViewModelProvider = SavedNewsViewModel_Factory.create(provideNewsDatabaseRepoProvider, applicationProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(5).put(NewsViewModel.class, (Provider) newsViewModelProvider).put(SearchViewModel.class, (Provider) searchViewModelProvider).put(SourceViewModel.class, (Provider) sourceViewModelProvider).put(WidgetViewModel.class, (Provider) widgetViewModelProvider).put(SavedNewsViewModel.class, (Provider) savedNewsViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MyApplication application) {
    injectMyApplication(application);
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    MyApplication_MembersInjector.injectDispatchingAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerApplicationComponent(new NewsHeadlinesModule(), new CoreDataModule(), new SourceDataModule(), new DatabaseModule(), new SearchModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory> splashFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeNewsDetailFragment.NewsDetailFragmentSubcomponent.Factory> newsDetailFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeNewsHeadlinesFragment.NewsHeadlinesFragmentSubcomponent.Factory> newsHeadlinesFragmentSubcomponentFactoryProvider;

    private Provider<SourcesFragmentBuildersModule_ContributeSourceFragment.SourcesFragmentSubcomponent.Factory> sourcesFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(10).put(MainActivity.class, (Provider) DaggerApplicationComponent.this.mainActivitySubcomponentFactoryProvider).put(SearchActivity.class, (Provider) DaggerApplicationComponent.this.searchActivitySubcomponentFactoryProvider).put(StackWidgetService.class, (Provider) DaggerApplicationComponent.this.stackWidgetServiceSubcomponentFactoryProvider).put(WidgetItemDetailActivity.class, (Provider) DaggerApplicationComponent.this.widgetItemDetailActivitySubcomponentFactoryProvider).put(SavedFragment.class, (Provider) DaggerApplicationComponent.this.savedFragmentSubcomponentFactoryProvider).put(SavedNewsDetailFragment.class, (Provider) DaggerApplicationComponent.this.savedNewsDetailFragmentSubcomponentFactoryProvider).put(SplashFragment.class, (Provider) splashFragmentSubcomponentFactoryProvider).put(NewsDetailFragment.class, (Provider) newsDetailFragmentSubcomponentFactoryProvider).put(NewsHeadlinesFragment.class, (Provider) newsHeadlinesFragmentSubcomponentFactoryProvider).put(SourcesFragment.class, (Provider) sourcesFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.splashFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory get(
            ) {
          return new SplashFragmentSubcomponentFactory();
        }
      };
      this.newsDetailFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeNewsDetailFragment.NewsDetailFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeNewsDetailFragment.NewsDetailFragmentSubcomponent.Factory get(
            ) {
          return new NewsDetailFragmentSubcomponentFactory();
        }
      };
      this.newsHeadlinesFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeNewsHeadlinesFragment.NewsHeadlinesFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeNewsHeadlinesFragment.NewsHeadlinesFragmentSubcomponent.Factory get(
            ) {
          return new NewsHeadlinesFragmentSubcomponentFactory();
        }
      };
      this.sourcesFragmentSubcomponentFactoryProvider = new Provider<SourcesFragmentBuildersModule_ContributeSourceFragment.SourcesFragmentSubcomponent.Factory>() {
        @Override
        public SourcesFragmentBuildersModule_ContributeSourceFragment.SourcesFragmentSubcomponent.Factory get(
            ) {
          return new SourcesFragmentSubcomponentFactory();
        }
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectPreferenceHelper(instance, DaggerApplicationComponent.this.preferenceHelper());
      return instance;
    }

    private final class SplashFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent create(
          SplashFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SplashFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SplashFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeSplashFragment.SplashFragmentSubcomponent {
      private SplashFragmentSubcomponentImpl(SplashFragment arg0) {

      }

      @Override
      public void inject(SplashFragment arg0) {
        injectSplashFragment(arg0);
      }

      private SplashFragment injectSplashFragment(SplashFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SplashFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class NewsDetailFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeNewsDetailFragment.NewsDetailFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeNewsDetailFragment.NewsDetailFragmentSubcomponent create(
          NewsDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NewsDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NewsDetailFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeNewsDetailFragment.NewsDetailFragmentSubcomponent {
      private NewsDetailFragmentSubcomponentImpl(NewsDetailFragment arg0) {

      }

      @Override
      public void inject(NewsDetailFragment arg0) {
        injectNewsDetailFragment(arg0);
      }

      private NewsDetailFragment injectNewsDetailFragment(NewsDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        NewsDetailFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class NewsHeadlinesFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeNewsHeadlinesFragment.NewsHeadlinesFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeNewsHeadlinesFragment.NewsHeadlinesFragmentSubcomponent create(
          NewsHeadlinesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NewsHeadlinesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NewsHeadlinesFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeNewsHeadlinesFragment.NewsHeadlinesFragmentSubcomponent {
      private NewsHeadlinesFragmentSubcomponentImpl(NewsHeadlinesFragment arg0) {

      }

      @Override
      public void inject(NewsHeadlinesFragment arg0) {
        injectNewsHeadlinesFragment(arg0);
      }

      private NewsHeadlinesFragment injectNewsHeadlinesFragment(NewsHeadlinesFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        NewsHeadlinesFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SourcesFragmentSubcomponentFactory implements SourcesFragmentBuildersModule_ContributeSourceFragment.SourcesFragmentSubcomponent.Factory {
      @Override
      public SourcesFragmentBuildersModule_ContributeSourceFragment.SourcesFragmentSubcomponent create(
          SourcesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SourcesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SourcesFragmentSubcomponentImpl implements SourcesFragmentBuildersModule_ContributeSourceFragment.SourcesFragmentSubcomponent {
      private SourcesFragmentSubcomponentImpl(SourcesFragment arg0) {

      }

      @Override
      public void inject(SourcesFragment arg0) {
        injectSourcesFragment(arg0);
      }

      private SourcesFragment injectSourcesFragment(SourcesFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SourcesFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class SearchActivitySubcomponentFactory implements SearchBuildersModule_ContributeSearchActivity.SearchActivitySubcomponent.Factory {
    @Override
    public SearchBuildersModule_ContributeSearchActivity.SearchActivitySubcomponent create(
        SearchActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SearchActivitySubcomponentImpl(arg0);
    }
  }

  private final class SearchActivitySubcomponentImpl implements SearchBuildersModule_ContributeSearchActivity.SearchActivitySubcomponent {
    private Provider<SearchFragmentBuildersModule_ContributeSearchResultsFragment.SearchResultsFragmentSubcomponent.Factory> searchResultsFragmentSubcomponentFactoryProvider;

    private Provider<SearchFragmentBuildersModule_ContributeSearchResultDetailFragment.SearchDetailFragmentSubcomponent.Factory> searchDetailFragmentSubcomponentFactoryProvider;

    private SearchActivitySubcomponentImpl(SearchActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(8).put(MainActivity.class, (Provider) DaggerApplicationComponent.this.mainActivitySubcomponentFactoryProvider).put(SearchActivity.class, (Provider) DaggerApplicationComponent.this.searchActivitySubcomponentFactoryProvider).put(StackWidgetService.class, (Provider) DaggerApplicationComponent.this.stackWidgetServiceSubcomponentFactoryProvider).put(WidgetItemDetailActivity.class, (Provider) DaggerApplicationComponent.this.widgetItemDetailActivitySubcomponentFactoryProvider).put(SavedFragment.class, (Provider) DaggerApplicationComponent.this.savedFragmentSubcomponentFactoryProvider).put(SavedNewsDetailFragment.class, (Provider) DaggerApplicationComponent.this.savedNewsDetailFragmentSubcomponentFactoryProvider).put(SearchResultsFragment.class, (Provider) searchResultsFragmentSubcomponentFactoryProvider).put(SearchDetailFragment.class, (Provider) searchDetailFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SearchActivity arg0) {
      this.searchResultsFragmentSubcomponentFactoryProvider = new Provider<SearchFragmentBuildersModule_ContributeSearchResultsFragment.SearchResultsFragmentSubcomponent.Factory>() {
        @Override
        public SearchFragmentBuildersModule_ContributeSearchResultsFragment.SearchResultsFragmentSubcomponent.Factory get(
            ) {
          return new SearchResultsFragmentSubcomponentFactory();
        }
      };
      this.searchDetailFragmentSubcomponentFactoryProvider = new Provider<SearchFragmentBuildersModule_ContributeSearchResultDetailFragment.SearchDetailFragmentSubcomponent.Factory>() {
        @Override
        public SearchFragmentBuildersModule_ContributeSearchResultDetailFragment.SearchDetailFragmentSubcomponent.Factory get(
            ) {
          return new SearchDetailFragmentSubcomponentFactory();
        }
      };
    }

    @Override
    public void inject(SearchActivity arg0) {
      injectSearchActivity(arg0);
    }

    private SearchActivity injectSearchActivity(SearchActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class SearchResultsFragmentSubcomponentFactory implements SearchFragmentBuildersModule_ContributeSearchResultsFragment.SearchResultsFragmentSubcomponent.Factory {
      @Override
      public SearchFragmentBuildersModule_ContributeSearchResultsFragment.SearchResultsFragmentSubcomponent create(
          SearchResultsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchResultsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchResultsFragmentSubcomponentImpl implements SearchFragmentBuildersModule_ContributeSearchResultsFragment.SearchResultsFragmentSubcomponent {
      private SearchResultsFragmentSubcomponentImpl(SearchResultsFragment arg0) {

      }

      @Override
      public void inject(SearchResultsFragment arg0) {
        injectSearchResultsFragment(arg0);
      }

      private SearchResultsFragment injectSearchResultsFragment(SearchResultsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, SearchActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SearchResultsFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SearchDetailFragmentSubcomponentFactory implements SearchFragmentBuildersModule_ContributeSearchResultDetailFragment.SearchDetailFragmentSubcomponent.Factory {
      @Override
      public SearchFragmentBuildersModule_ContributeSearchResultDetailFragment.SearchDetailFragmentSubcomponent create(
          SearchDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchDetailFragmentSubcomponentImpl implements SearchFragmentBuildersModule_ContributeSearchResultDetailFragment.SearchDetailFragmentSubcomponent {
      private SearchDetailFragmentSubcomponentImpl(SearchDetailFragment arg0) {

      }

      @Override
      public void inject(SearchDetailFragment arg0) {
        injectSearchDetailFragment(arg0);
      }

      private SearchDetailFragment injectSearchDetailFragment(SearchDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, SearchActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SearchDetailFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class StackWidgetServiceSubcomponentFactory implements ServiceBuildersModule_ContributeStackWidgetService.StackWidgetServiceSubcomponent.Factory {
    @Override
    public ServiceBuildersModule_ContributeStackWidgetService.StackWidgetServiceSubcomponent create(
        StackWidgetService arg0) {
      Preconditions.checkNotNull(arg0);
      return new StackWidgetServiceSubcomponentImpl(arg0);
    }
  }

  private final class StackWidgetServiceSubcomponentImpl implements ServiceBuildersModule_ContributeStackWidgetService.StackWidgetServiceSubcomponent {
    private StackWidgetServiceSubcomponentImpl(StackWidgetService arg0) {

    }

    @Override
    public void inject(StackWidgetService arg0) {
    }
  }

  private final class WidgetItemDetailActivitySubcomponentFactory implements WidgetBuildersModule_ContributeWidgetItemDetailActivity.WidgetItemDetailActivitySubcomponent.Factory {
    @Override
    public WidgetBuildersModule_ContributeWidgetItemDetailActivity.WidgetItemDetailActivitySubcomponent create(
        WidgetItemDetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new WidgetItemDetailActivitySubcomponentImpl(arg0);
    }
  }

  private final class WidgetItemDetailActivitySubcomponentImpl implements WidgetBuildersModule_ContributeWidgetItemDetailActivity.WidgetItemDetailActivitySubcomponent {
    private WidgetItemDetailActivitySubcomponentImpl(WidgetItemDetailActivity arg0) {

    }

    @Override
    public void inject(WidgetItemDetailActivity arg0) {
      injectWidgetItemDetailActivity(arg0);
    }

    private WidgetItemDetailActivity injectWidgetItemDetailActivity(
        WidgetItemDetailActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.dispatchingAndroidInjectorOfObject());
      WidgetItemDetailActivity_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class SavedFragmentSubcomponentFactory implements SavedFragmentsBuildersModule_ContributeSavedFragment.SavedFragmentSubcomponent.Factory {
    @Override
    public SavedFragmentsBuildersModule_ContributeSavedFragment.SavedFragmentSubcomponent create(
        SavedFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SavedFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SavedFragmentSubcomponentImpl implements SavedFragmentsBuildersModule_ContributeSavedFragment.SavedFragmentSubcomponent {
    private SavedFragmentSubcomponentImpl(SavedFragment arg0) {

    }

    @Override
    public void inject(SavedFragment arg0) {
      injectSavedFragment(arg0);
    }

    private SavedFragment injectSavedFragment(SavedFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.dispatchingAndroidInjectorOfObject());
      SavedFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class SavedNewsDetailFragmentSubcomponentFactory implements SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment.SavedNewsDetailFragmentSubcomponent.Factory {
    @Override
    public SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment.SavedNewsDetailFragmentSubcomponent create(
        SavedNewsDetailFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SavedNewsDetailFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SavedNewsDetailFragmentSubcomponentImpl implements SavedFragmentsBuildersModule_ContributeSavedNewsDetailFragment.SavedNewsDetailFragmentSubcomponent {
    private SavedNewsDetailFragmentSubcomponentImpl(SavedNewsDetailFragment arg0) {

    }

    @Override
    public void inject(SavedNewsDetailFragment arg0) {
      injectSavedNewsDetailFragment(arg0);
    }

    private SavedNewsDetailFragment injectSavedNewsDetailFragment(
        SavedNewsDetailFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.dispatchingAndroidInjectorOfObject());
      SavedNewsDetailFragment_MembersInjector.injectViewModelFactory(instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
