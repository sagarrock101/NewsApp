// Generated by Dagger (https://dagger.dev).
package com.sagarock101.core.di;

import com.sagarock101.core.utils.GuardianApiKeyInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreDataModule_ProvideOkHttpClientForGuardianApiFactory implements Factory<OkHttpClient> {
  private final CoreDataModule module;

  private final Provider<GuardianApiKeyInterceptor> apiKeyInterceptorProvider;

  public CoreDataModule_ProvideOkHttpClientForGuardianApiFactory(CoreDataModule module,
      Provider<GuardianApiKeyInterceptor> apiKeyInterceptorProvider) {
    this.module = module;
    this.apiKeyInterceptorProvider = apiKeyInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClientForGuardianApi(module, apiKeyInterceptorProvider.get());
  }

  public static CoreDataModule_ProvideOkHttpClientForGuardianApiFactory create(
      CoreDataModule module, Provider<GuardianApiKeyInterceptor> apiKeyInterceptorProvider) {
    return new CoreDataModule_ProvideOkHttpClientForGuardianApiFactory(module, apiKeyInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClientForGuardianApi(CoreDataModule instance,
      GuardianApiKeyInterceptor apiKeyInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClientForGuardianApi(apiKeyInterceptor));
  }
}
