// Generated by Dagger (https://dagger.dev).
package com.sagarock101.core.di;

import com.sagarock101.core.utils.InterceptorWithApiKey;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreDataModule_ProvideOkhttpClientFactory implements Factory<OkHttpClient> {
  private final CoreDataModule module;

  private final Provider<InterceptorWithApiKey> interceptorWithApiKeyProvider;

  public CoreDataModule_ProvideOkhttpClientFactory(CoreDataModule module,
      Provider<InterceptorWithApiKey> interceptorWithApiKeyProvider) {
    this.module = module;
    this.interceptorWithApiKeyProvider = interceptorWithApiKeyProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkhttpClient(module, interceptorWithApiKeyProvider.get());
  }

  public static CoreDataModule_ProvideOkhttpClientFactory create(CoreDataModule module,
      Provider<InterceptorWithApiKey> interceptorWithApiKeyProvider) {
    return new CoreDataModule_ProvideOkhttpClientFactory(module, interceptorWithApiKeyProvider);
  }

  public static OkHttpClient provideOkhttpClient(CoreDataModule instance,
      InterceptorWithApiKey interceptorWithApiKey) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkhttpClient(interceptorWithApiKey));
  }
}
