// Generated by Dagger (https://dagger.dev).
package com.sagarock101.core.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreDataModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final CoreDataModule module;

  private final Provider<OkHttpClient> okhttpClientProvider;

  private final Provider<GsonConverterFactory> converterFactoryProvider;

  public CoreDataModule_ProvideRetrofitFactory(CoreDataModule module,
      Provider<OkHttpClient> okhttpClientProvider,
      Provider<GsonConverterFactory> converterFactoryProvider) {
    this.module = module;
    this.okhttpClientProvider = okhttpClientProvider;
    this.converterFactoryProvider = converterFactoryProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, okhttpClientProvider.get(), converterFactoryProvider.get());
  }

  public static CoreDataModule_ProvideRetrofitFactory create(CoreDataModule module,
      Provider<OkHttpClient> okhttpClientProvider,
      Provider<GsonConverterFactory> converterFactoryProvider) {
    return new CoreDataModule_ProvideRetrofitFactory(module, okhttpClientProvider, converterFactoryProvider);
  }

  public static Retrofit provideRetrofit(CoreDataModule instance, OkHttpClient okhttpClient,
      GsonConverterFactory converterFactory) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(okhttpClient, converterFactory));
  }
}
